					Spring Boot
                                        ==========



What is Framework?
-------------------
=> Framework is a semi developed / readymade software
=> Frameworks will provide some common logics required for several projects development.
=> Frameworks provides re-usable components (classes & interfaces)
=> Frameworks will reduce burden on the developers
=> IN Java community we are having 2 types of frameworks
1) ORM frameworks (Ex: Hibernate) - Object Relational Mapping
2) Web Frameworks (Ex: Struts) - 2001
Note: Spring is called as Application development Framework (interface21)
1st spring version came into market 2003/2004
Current version of Spring is 6.x
-> Spring is not single framework
-> Spring Framework is collection of frameworks (Modules)
Spring 1.x ---> 7 Modules
Spring 2.x ---> 6 Modules
Spring 3.x ----> 20+ Modules
-> Spring Framework is versatile framework
-> Spring is loosely coupled framework

What is Spring?
-----------------
-> Spring is a java based application development framework
-> By using spring we can develop end to end application
-> Spring is developed by using JSE & JEE
-> Spring framework developed by Rod Johnson
-> First version of spring came into market in 2004 (Spring 1.x v)
-> The current version of Spring is 6.x (2022)
-> Spring is developed in modular fashion
-> Spring Modules are loosely coupled
-> Spring is versatile framework (it can integrate with any other framework)

Spring Framework Modules
------------------------
1) Spring Core
2) Spring Context
3) Spring DAO
4) Spring ORM
5) Spring AOP
6) Spring Web MVC
7) Spring REST
8) Spring Data JPA
9) Spring Cloud
10) Spring Security
11) Spring Social
12) Spring Batch


Spring Core
--------------
-> Base module of spring framework
-> Core Module providing fundamental concepts of Spring those are
IOC : Inversion Of Control
DI : Dependency Injection
-> IOC & DI are used to develop classes with loosely coupling
-> IOC will take care of java objects life cycle (Spring Beans)

Spring Context
---------------
-> TO manage configurations in Spring application we will use Context Module
-> It provides configuration support required for managing classes

Spring AOP
------------
AOP : Aspect Oriented Programming
-> AOP is used to separate cross cutting logics in the application
Cross Cutting / Secondary / Helper Logics
Ex : Security, transaction, Logging, Auditing & exception handling etc...

Spring DAO / Spring JDBC
-=-----------------------
-> Spring JDBC is extension for Java JDBC
-> To simplify persistence logic development we can use Spring JDBC

JDBC Logic
-----------
1. load driver
2. get connection
3. Create statement
4. Execute query
5. process result
6. Close connection

spring jdbc
-----------
1. Execute query
2. process result
=> Spring JDBC provided predefined classes to perform DB operations
Ex: ,JdbcTemplate  NamedJdbcTemplate etc...

Spring ORM
----------
=> SPring ORM module is extension for existing ORM frameworks
ORM - Object relational mappping
=> To suppport ORM integrations we have Spring ORM module
Spring ORM = Spring + ORM Framework (Ex: Hibernate)

Hibernate
---------
1. Create Config obj
2. create session factory
3. create session
4. begin tx
5. execute methods
6. commit tx
7. close session
8. close sf

spring orm
-------------
HibernateTemplate.save(entityObj)

Spring Web MVC
--------------
-> To develop both web & distributed (web services) applications
-> It is used to simplify web layer development in applications

Spring REST
------------
-> To simplify REST API development


Spring Data JPA
----------------
-> It is extension for Spring ORM
-> It is providing readymade methods to perform CRUD operations in DB

Spring Security
----------------
-> It is used to secure our spring based application
-> We can implement both Authentication & Authorization by using Spring Security

Authentication: Decide who can access our application?
Authorization: Identify logged in user having access for the functionality or not?

Spring Batch
------------
=> Batch means bulk operation
Ex:
sending bulk email to customers
sending bulk sms to students regarding course update
sending bank statement to account holders
read records from file and store into DB

Spring Cloud
-------------
-> It provides configurations required for Micro services development
Service Registry
Admin Server
API Gateway

Spring Core
------------
-> Base module of Spring Framework
-> Providing IoC & DI
-> IOC & DI are used to develop classes with loosely coupling
package com.pramod;

public class App {
	
	public static class Engine {
		public int start() {
			return 1;
		}
	}

	public static class Car extends Engine {
		public void drive() {
			int status = super.start();
			if (status >= 1) {
				System.out.println("Journey Started..");
			} else {
				System.out.println("Engine Trouble..");
			}
		}
	}

	public static void main(String[] args) {
		Car c = new Car();
		c.drive();
	}
}

-> Car is extending Engine class
-> Car class can't use inheritance in future
-> Any changes in Engine class will effect on Car class
-> Car is tightly coupled with Engine
Note: It is not recommended to develop classes with Tightly coupling.

public class Car {
public void drive() {
Engine eng = new Engine();
int status = eng.start();
if (status >= 1) {
System.out.println("Journey Started..");
} else {
System.out.println("Engine Trouble..");
}
}
}

-> Car is directly creating Object for Engine
-> Any changes to Engine class will effect on Car class
-> Car is always talking to only one Engine
-> If i want to change from one Engine to another Engine then we should modify Car class code.
Note: Car is tightly coupled with Engine.

What is Dependency Injection?
-------------------------------

The process of injecting dependent object into target object using target class variable / setter method /
constructor is called as Dependency Injection.
Dependency Injection Types
1) Field Injection (variable)
2) Setter Injection (setter method)
3) Constructor Injection (constructor)
Requirement:
Develop an application to perform bill payment. It should support for multiple Payment options (Debit
card, Credit Card, Sodex & Amex.... )

Spring Dependency Injection
----------------------------
Dependency Injection is the main functionality provided by Spring IOC(Inversion of Control). The Spring-Core module is responsible for injecting dependencies through either Constructor or Setter methods. The design principle of Inversion of Control emphasizes keeping the Java classes independent of each other and the container frees them from object creation and maintenance. These classes, managed by Spring, must adhere to the standard definition of Java-Bean. Dependency Injection in Spring also ensures loose coupling between the classes. There are two types of Spring Dependency Injection.

Setter Dependency Injection (SDI)
Constructor Dependency Injection (CDI)



What will happen when we perform both constructor & setter injections on same variable ?
-> First Constructor injection will happen then it will initialize the variable then setter injection will happen
and it will re-initialize the same variable so final value be setter injection value.
Note: Setter Injection will override Constructor injection.

What is IoC ?

IOC: Inversion of Control
--------------------------
-> IOC is a principle which is used to manage and collaborate dependencies among the objects in the
application.
-> In Spring, IOC is responsible for Dependency Injection.

Spring IoC (Inversion of Control) Container is the core of Spring Framework. It creates the objects, configures and assembles their dependencies, manages their entire life cycle. The Container uses Dependency Injection(DI) to manage the components that make up the application. It gets the information about the objects from a configuration file(XML) or Java Code or Java Annotations and Java POJO class. These objects are called Beans. Since the Controlling of Java objects and their lifecycle is not done by the developers, hence the name Inversion Of Control. The followings are some of the main features of Spring IoC,

Creating Object for us,
Managing our objects,
Helping our application to be configurable,
Managing dependencies


Note: For IOC we need to pass Java Classes + Configuration as input then IOC will perform DI and it will
produce Spring Beans.

Spring Bean : The class which is managed by IOC is called as Spring Bean.
How start IOC container?
=> We can start in 2 ways
1) BeanFactory (I) (outdated)
2) ApplicationContext (I) (recommended)

ApplicationContext ctxt = new ClassPathXmlApplicationContext(String xmlFile)

Spring MVC
-----------
Spring MVC Framework follows the Model-View-Controller architectural design pattern which works around the Front Controller i.e. the Dispatcher Servlet. The Dispatcher Servlet handles and dispatches all the incoming HTTP requests to the appropriate controller.

Model: The Model encapsulates the application data.
View: View renders the model data and generates HTML output that the clientâ€™s browser can interpret.
Controller: The Controller processes the user requests and passes them to the view for rendering.

Dispatcher Servlet
-------------------
Dispatcher Servlet is the front controller that manages the entire HTTP request and response handling process.

Spring MVC Framework works as follows:
--------------------------------------
All the incoming requests are intercepted by the DispatcherServlet that works as the front controller.
The DispatcherServlet then gets an entry of handler mapping from the XML file and forwards the request to the controller.
The object of ModelAndView is returned by the controller.
The DispatcherServlet checks the entry of the view resolver in the XML file and invokes the appropriate view component.

Restful micro service:
=======================

==> Microservice

HttpStatus codes:
=================
1xx (100-199)---
2xx (200-299)-- success
3xx --
4xx -- client error
5xx -- server side error

